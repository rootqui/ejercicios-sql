CREATE TABLE [dbo].[PROVEEDOR](
	[ID] [int] NOT NULL,
	[RAZON_SOCIAL] [varchar](1000) NOT NULL,
 CONSTRAINT [PK_PROVEEDOR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (1, N'PROVEEDOR 1')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (2, N'PROVEEDOR 2')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (3, N'PROVEEDOR 3')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (4, N'PROVEEDOR 4')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (5, N'PROVEEDOR 5')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (6, N'PROVEEDOR 6')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (7, N'PROVEEDOR 7')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (8, N'PROVEEDOR 8')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (9, N'PROVEEDOR 9')
INSERT [dbo].[PROVEEDOR] ([ID], [RAZON_SOCIAL]) VALUES (10, N'PROVEEDOR 10')
GO

SELECT * FROM PROVEEDOR

SELECT * INTO PROVEEDOR_REPLICATE FROM PROVEEDOR WHERE 1 = 0 

-- 1.  Implementar las instrucciones necesarias para sincornizar la tabla PROVEEDOR (tabla base) y PROVEEDOR_REPLICATE

INSERT INTO PROVEEDOR_REPLICATE
SELECT S.ID, S.RAZON_SOCIAL 
FROM PROVEEDOR S
	LEFT JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID


SELECT * FROM PROVEEDOR
SELECT * FROM PROVEEDOR_REPLICATE 

-- Sincronizar registros nuevos
INSERT INTO PROVEEDOR_REPLICATE
SELECT S.ID, S.RAZON_SOCIAL 
FROM PROVEEDOR S
	LEFT JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID
WHERE T.ID IS NULL


INSERT INTO PROVEEDOR_REPLICATE
SELECT S.ID, S.RAZON_SOCIAL 
FROM PROVEEDOR S
WHERE S.ID NOT IN (SELECT ID FROM PROVEEDOR_REPLICATE)

INSERT INTO PROVEEDOR VALUES (11, 'PROVEEDOR 11')


TRUNCATE TABLE PROVEEDOR_REPLICATE

SELECT * FROM PROVEEDOR
SELECT * FROM PROVEEDOR_REPLICATE 

-- Sincronizar registros actualizados en el origen

update PROVEEDOR set RAZON_SOCIAL = RAZON_SOCIAL + ' update' where id < 3

--select *
UPDATE T
SET RAZON_SOCIAL = S.RAZON_SOCIAL
FROM PROVEEDOR S
	INNER JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID
where s.RAZON_SOCIAL <> t.RAZON_SOCIAL --  or 

-- Sincronizar registros en el destino que ya no existan en el origen

DELETE PROVEEDOR WHERE ID = 11

--SELECT *
DELETE T
FROM PROVEEDOR S
	RIGHT JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID
WHERE S.ID IS NULL

SELECT * FROM PROVEEDOR
SELECT * FROM PROVEEDOR_REPLICATE 

---

INSERT INTO PROVEEDOR_REPLICATE
SELECT S.ID, S.RAZON_SOCIAL 
FROM PROVEEDOR S
	LEFT JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID
WHERE T.ID IS NULL

UPDATE T
SET RAZON_SOCIAL = S.RAZON_SOCIAL
FROM PROVEEDOR S
	INNER JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID
where s.RAZON_SOCIAL <> t.RAZON_SOCIAL --  or 

DELETE T
FROM PROVEEDOR S
	RIGHT JOIN PROVEEDOR_REPLICATE T ON S.ID = T.ID
WHERE S.ID IS NULL

---

INSERT INTO PROVEEDOR VALUES (12, 'PROVEEDOR 12')
INSERT INTO PROVEEDOR VALUES (15, 'PROVEEDOR 15')

update PROVEEDOR set RAZON_SOCIAL = RAZON_SOCIAL + ' update' where id = 5
update PROVEEDOR set RAZON_SOCIAL = RAZON_SOCIAL + ' update' where id = 9

DELETE PROVEEDOR WHERE ID = 8

SELECT * FROM PROVEEDOR
SELECT * FROM PROVEEDOR_REPLICATE 

-- Uso de instruccion MERGE

MERGE
	INTO <table_destino> AS <alias> -- tabla destino
	USING <tabla, view, join, cte, ...> AS <alias>--tabla/select 
	ON <join>

	WHEN NOT MATCHED --INSERTAR 
		THEN 
			INSERT <columnas>
			VALUES <valores>

	WHEN MATCHED --ACTUALIZAR
		THEN 
			UPDATE 
			SET <asignacion>

	WHEN NOT MATCHED BY SOURCE --ELIMINAR
		THEN 
			DELETE
;


MERGE
	INTO PROVEEDOR_REPLICATE AS T -- tabla destino (Target)
	USING PROVEEDOR AS S --tabla/select (Source)
	ON S.ID = T.ID --AND S.COL2 = T.COL2 AND 

	WHEN NOT MATCHED --INSERTAR (LEFT)
		THEN 
			INSERT (ID, RAZON_SOCIAL)
			VALUES (S.ID, S.RAZON_SOCIAL)

	WHEN MATCHED --ACTUALIZAR (INNER)
		AND (T.RAZON_SOCIAL <> S.RAZON_SOCIAL)   
		THEN 
			UPDATE 
			SET RAZON_SOCIAL = S.RAZON_SOCIAL

	WHEN NOT MATCHED BY SOURCE --ELIMINAR (DELETE)
		THEN 
			DELETE

	--OUTPUT $ACTION, INSERTED.ID, DELETED.ID
;


INSERT INTO PROVEEDOR VALUES (16, 'PROVEEDOR 16')
INSERT INTO PROVEEDOR VALUES (17, 'PROVEEDOR 17')

update PROVEEDOR set RAZON_SOCIAL = RAZON_SOCIAL + ' update' where id = 1
update PROVEEDOR set RAZON_SOCIAL = RAZON_SOCIAL + ' update' where id = 3

DELETE PROVEEDOR WHERE ID = 17


SELECT * FROM PROVEEDOR
SELECT * FROM PROVEEDOR_REPLICATE 

CREATE PROC uP_SincronizarProveedor
AS
BEGIN
	MERGE
		INTO PROVEEDOR_REPLICATE AS T -- tabla destino (Target)
		USING PROVEEDOR AS S --tabla/select (Source)
		ON S.ID = T.ID --AND S.COL2 = T.COL2 AND 

		WHEN NOT MATCHED --INSERTAR (LEFT)
			THEN 
				INSERT (ID, RAZON_SOCIAL)
				VALUES (S.ID, S.RAZON_SOCIAL)

		WHEN MATCHED --ACTUALIZAR (INNER)
			AND (T.RAZON_SOCIAL <> S.RAZON_SOCIAL)   
			THEN 
				UPDATE 
				SET RAZON_SOCIAL = S.RAZON_SOCIAL

		WHEN NOT MATCHED BY SOURCE --ELIMINAR (DELETE)
			THEN 
				DELETE

		--OUTPUT $ACTION, INSERTED.ID, DELETED.ID
	;
END
GO

EXEC uP_SincronizarProveedor